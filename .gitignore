{
  "name": "devops-ci-cd-demo",
  "version": "1.0.0",
  "description": "Sample Node app for CI/CD with Docker, Kubernetes, and GitHub Actions",
  "main": "app.js",
  "scripts": {
    "start": "node app.js",
    "test": "node -e \"console.log('Tests passed âœ…')\""
  },
  "author": "Joby Jacob",
  "license": "MIT",
  "dependencies": {
    "express": "^4.19.2"
  }
}
const express = require('express');
const app = express();
const PORT = process.env.PORT || 3000;

app.get('/', (_req, res) => {
  res.json({
    status: 'ok',
    message: 'Hello from Joby Jacob â€” DevOps CI/CD Demo ðŸš€',
    version: '1.0.0'
  });
});

app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
node_modules
npm-debug.log
.git
.gitignore
Dockerfile
FROM node:20-alpine
WORKDIR /usr/src/app
COPY package*.json ./
RUN npm ci --only=production
COPY . .
EXPOSE 3000
CMD ["npm", "start"]
apiVersion: apps/v1
kind: Deployment
metadata:
  name: devops-ci-cd-demo
  labels:
    app: devops-ci-cd-demo
spec:
  replicas: 2
  selector:
    matchLabels:
      app: devops-ci-cd-demo
  template:
    metadata:
      labels:
        app: devops-ci-cd-demo
    spec:
      containers:
        - name: web
          image: ghcr.io/joby-jacob/devops-ci-cd-demo:latest
          ports:
            - containerPort: 3000
          readinessProbe:
            httpGet: { path: "/", port: 3000 }
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            httpGet: { path: "/", port: 3000 }
            initialDelaySeconds: 10
            periodSeconds: 20
---
apiVersion: v1
kind: Service
metadata:
  name: devops-ci-cd-demo
spec:
  selector:
    app: devops-ci-cd-demo
  ports:
    - port: 80
      targetPort: 3000
  type: ClusterIP
name: CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  packages: write

env:
  IMAGE_NAME: devops-ci-cd-demo

jobs:
  build-test-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install deps
        run: npm ci

      - name: Unit tests
        run: npm test

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build image
        run: docker build -t ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.sha }} .

      - name: Tag latest
        run: docker tag ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.sha }} ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest

      - name: Push images
        run: |
          docker push ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          docker push ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest

  deploy:
    needs: build-test-push
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: "latest"

      # Provide your cluster kubeconfig via secret KUBECONFIG_FILE (base64 encoded kubeconfig)
      - name: Write kubeconfig
        run: echo "${{ secrets.KUBECONFIG_FILE }}" | base64 -d > $HOME/.kube/config

      - name: Set image to latest
        run: |
          kubectl set image deployment/devops-ci-cd-demo web=ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest --record || true

      - name: Apply manifests
        run: kubectl apply -f k8s-deployment.yml

      - name: Rollout status
        run: kubectl rollout status deployment/devops-ci-cd-demo --timeout=120s
# DevOps CI/CD Demo ðŸš€

Sample Node.js app deployed via **Docker + Kubernetes** with a **GitHub Actions** CI/CD pipeline.  
Image is published to **GitHub Container Registry (GHCR)**.

## Architecture
```mermaid
flowchart LR
  A[GitHub Repo<br/>main] -->|push| B[GitHub Actions<br/>CI]
  B --> C[Build & Test]
  C --> D[Docker Build]
  D --> E[Push to GHCR]
  E --> F[kubectl apply<br/>Deployment + Service]
  F --> G[Kubernetes Cluster]
  G --> H[Service (Port 80)]
  H --> I[Pod (Node app)]
npm ci
npm start
# open http://localhost:3000
docker build -t devops-ci-cd-demo:local .
docker run -p 3000:3000 devops-ci-cd-demo:local
kubectl apply -f k8s-deployment.yml
kubectl get svc devops-ci-cd-demo

---

# 2) Quick Setup Steps (once)

1) **Enable GHCR visibility**  
   - Visit: GitHub â†’ Settings â†’ *Packages* â†’ Set visibility so your profile can read packages.

2) **Create secret `KUBECONFIG_FILE`** (base64 of your kubeconfig)
```bash
# On your machine:
base64 -w0 ~/.kube/config | clip   # (mac: | pbcopy)  (win powershell: certutil -encode)
# Then paste into repo secrets: Settings â†’ Secrets and variables â†’ Actions â†’ New repository secret
# inside repo
npm ci
npm start
# visit http://localhost:3000
# Docker
docker build -t devops-ci-cd-demo:local .
docker run -p 3000:3000 devops-ci-cd-demo:local
